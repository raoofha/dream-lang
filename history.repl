a = 2
a = 2
parser.parse("234")
parser.parse("234")
console.log "asd"
console.log "asd"
_ = 4
_ = 4
_
_
zxcvs
zxcvs
zxcvs
zxcvs
a
a
a
a
0
0
0
0
x = 2
x = 2
x = 2
x = 2
asdfsdf
asdfsdf
asdfsdf
asdfsdf
parser.parse("asdf")
parser.parse("asdf")
parser.parse("1233")
parser.parse("1233")
parser.readtoken("1233")
parser.readtoken("1233")
parser.parse("1233")
parser.parse("1233")
parser.parse("[234 234]")
parser.parse("[234 234]")
parser.parse("[ 234 234 ]")
parser.parse("[ 234 234 ]")
parser.parse("1233")
parser.parse("1233")
(new Parser).parse("1233")
(new Parser).parse("1233")
(new Parser).parse("[ 123 41 ]")
(new Parser).parse("[ 123 41 ]")
(new Parser).parse("[ 123 41 ")
(new Parser).parse("[ 123 41 ")
(new Parser).parse("[ 123 41 ]")
(new Parser).parse("[ 123 41 ]")
(new Parser).parse("[123 41 ]")
(new Parser).parse("[123 41 ]")
(new Parser).parse("[123 41]")
(new Parser).parse("[123 41]")
compiler.compile("(+ 2 2)")
compiler.compile("(+ 2 2)")
compiler.compile("(switch ch ("a"))")
compiler.compile("(switch ch ("a"))")
compiler.compile("(switch ch (\"a\"))")
compiler.compile("(switch ch (\"a\"))")
compiler.compile("(switch ch (\"a\" 10))")
compiler.compile("(switch ch (\"a\" 10))")
compiler.compile("(switch ch (\"a\" 10) ("b"))")
compiler.compile("(switch ch (\"a\" 10) ("b"))")
compiler.compile("(switch ch (\"a\" 10) (\"b\"))")
compiler.compile("(switch ch (\"a\" 10) (\"b\"))")
compiler.compile("(switch ch (\"a\" 10) (\"b\" 20))")
compiler.compile("(switch ch (\"a\" 10) (\"b\" 20))")
compiler.compile('(switch ch ("a" 10) ("b" 20))')
compiler.compile('(switch ch ("a" 10) ("b" 20))')
compiler.compile('(switch ch ("a" 10) ("b" 20) (else 10))')
compiler.compile('(switch ch ("a" 10) ("b" 20) (else 10))')
compiler.compile('(switch ch ("a" 10) ("b" 20) (else (10)))')
compiler.compile('(switch ch ("a" 10) ("b" 20) (else (10)))')
compiler.compile('(switch ch ("a" 10) ("b" 20) (else (10) (20)))')
compiler.compile('(switch ch ("a" 10) ("b" 20) (else (10) (20)))')
compiler.compile('(switch ch ("a" 10) ("b" 20) (else (10) 20))')
compiler.compile('(switch ch ("a" 10) ("b" 20) (else (10) 20))')
compiler.compile('(switch ch ("a" 10) ("b" 20) (else (10)))')
compiler.compile('(switch ch ("a" 10) ("b" 20) (else (10)))')
compiler.compile('(switch ch ("a" 10) ("b" 20) (else 10))')
compiler.compile('(switch ch ("a" 10) ("b" 20) (else 10))')
compiler.compile('(if (true) ((a) (b)) (else if (false) ((c)))')
compiler.compile('(if (true) ((a) (b)) (else if (false) ((c)))')
compiler.compile('(if (true) ((a) (b)) (else if (false) ((c))))')
compiler.compile('(if (true) ((a) (b)) (else if (false) ((c))))')
compiler.compile('(if (true) ((a) (b)) (else if (false) ((c))) (else ((d))))')
compiler.compile('(if (true) ((a) (b)) (else if (false) ((c))) (else ((d))))')
compiler.compile('(if (true) ((a) (b)) (else if (nil) ((c))) (else ((d))))')
compiler.compile('(if (true) ((a) (b)) (else if (nil) ((c))) (else ((d))))')
compiler.compile('(if true ((a) (b)) (else if nil ((c))) (else ((d))))')
compiler.compile('(if true ((a) (b)) (else if nil ((c))) (else ((d))))')
compiler.compile('(+ 1 1)')
compiler.compile('(+ 1 1)')
compiler.compile('(if true ((aa) (bb)) )')
compiler.compile('(if true ((aa) (bb)) )')
compiler.compile('(if true ((aa) (bb))')
compiler.compile('(if true ((aa) (bb))')
compiler.compile('(if true ((aa) (bb)))')
compiler.compile('(if true ((aa) (bb)))')
compiler.compile('(if true ((aa) (bb)) (else if false ((cc) (dd)) )')
compiler.compile('(if true ((aa) (bb)) (else if false ((cc) (dd)) )')
compiler.compile('(if true ((aa) (bb)) (else if false ((cc) (dd))) )')
compiler.compile('(if true ((aa) (bb)) (else if false ((cc) (dd))) )')
compiler.compile('(if true ((aa) (bb)) (else if false ((cc) (dd)) )')
compiler.compile('(if true ((aa) (bb)) (else if false ((cc) (dd)) )')
compiler.compile('(if true ((aa) (bb)) (else if false ((cc) (dd))) )')
compiler.compile('(if true ((aa) (bb)) (else if false ((cc) (dd))) )')
compiler.compile('(if true ((aa) (bb)) (else if false ((cc) (dd))) ))')
compiler.compile('(if true ((aa) (bb)) (else if false ((cc) (dd))) ))')
compiler.compile('(if true ((aa) (bb)) (else if false ((cc) (dd))) )')
compiler.compile('(if true ((aa) (bb)) (else if false ((cc) (dd))) )')
compiler.compile('(if true ((aa) (bb)) (else if false ((cc) (dd))) ')
compiler.compile('(if true ((aa) (bb)) (else if false ((cc) (dd))) ')
compiler.compile('(if true ((aa) (bb)) (else ((cc) (dd)))) ')
compiler.compile('(if true ((aa) (bb)) (else ((cc) (dd)))) ')
compiler.compile('(if true ((aa) (bb)) (else if false ((cc) (dd)))) ')
compiler.compile('(if true ((aa) (bb)) (else if false ((cc) (dd)))) ')
compiler.compile('def- markReturn (node)')
compiler.compile('def- markReturn (node)')
  switch node.type
  switch node.type
    "Program" (node.value.forEach fn (n) (markReturn n))
    "Program" (node.value.forEach fn (n) (markReturn n))
    "Map" "Array" "String" "Symbol" "Keyword" "Number" "Bool" "Nil" (set! node.return true)
    "Map" "Array" "String" "Symbol" "Keyword" "Number" "Bool" "Nil" (set! node.return true)
    "List" "Line"
    "List" "Line"
      switch (aget (aget node.value 0) :value)
      switch (aget (aget node.value 0) :value)
        "def" "def-"
        "def" "def-"
          if (> node.value.length 3)
          if (> node.value.length 3)
            markReturn (aget node.value (- node.value.length 1))
            markReturn (aget node.value (- node.value.length 1))
        "switch"
        "switch"
          .forEach (node.value.slice 2)
          .forEach (node.value.slice 2)
            fn (n)
            fn (n)
              if (= (aget (aget n.value 0) :value) "else")
              if (= (aget (aget n.value 0) :value) "else")
                set! elsebody (aget (aget n.value 1) :value)
                set! elsebody (aget (aget n.value 1) :value)
                markReturn (aget elsebody (- elsebody.length 1))
                markReturn (aget elsebody (- elsebody.length 1))
              else
              else
                markReturn (aget n.value (- n.value.length 1))
                markReturn (aget n.value (- n.value.length 1))
        "if"
        "if"
          set! ifbody (aget (aget node.value 2) :value)
          set! ifbody (aget (aget node.value 2) :value)
          markReturn (aget ifbody (- ifbody.length 1))
          markReturn (aget ifbody (- ifbody.length 1))
          .forEach (node.value.slice 3)
          .forEach (node.value.slice 3)
            fn (n)
            fn (n)
              if (= (aget (aget n.value 1) :value) "if")
              if (= (aget (aget n.value 1) :value) "if")
                markReturn (aget (aget (aget n.value 3) :value) (- (aget (aget (aget n.value 3) :value) :length) 1))
                markReturn (aget (aget (aget n.value 3) :value) (- (aget (aget (aget n.value 3) :value) :length) 1))
              else
              else
                markReturn (aget (aget (aget n.value 1) :value) (- (aget (aget (aget n.value 1) :value) :length) 1))
                markReturn (aget (aget (aget n.value 1) :value) (- (aget (aget (aget n.value 1) :value) :length) 1))
        else
        else
          set! node.return true
          set! node.return true
